{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/hyejinyang/Desktop/coffeeout-beta/src/components/app-bootstrap/app-bootstrap.tsx\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useCallback, useEffect, useRef } from \"react\";\nimport * as SplashScreen from \"expo-splash-screen\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { useFonts, NotoSansKR_300Light, NotoSansKR_500Medium, NotoSansKR_700Bold } from \"@expo-google-fonts/noto-sans-kr\";\nexport default function AppBootstrap(_ref) {\n  var children = _ref.children;\n  var appIsReadyRef = useRef(false);\n\n  var _useFonts = useFonts({\n    NotoSansKR_700Bold: NotoSansKR_700Bold,\n    NotoSansKR_500Medium: NotoSansKR_500Medium,\n    NotoSansKR_300Light: NotoSansKR_300Light\n  }),\n      _useFonts2 = _slicedToArray(_useFonts, 1),\n      fontLoaded = _useFonts2[0];\n\n  useEffect(function () {\n    function prepare() {\n      return _regeneratorRuntime.async(function prepare$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(SplashScreen.preventAutoHideAsync());\n\n            case 3:\n              _context.next = 5;\n              return _regeneratorRuntime.awrap(new Promise(function (resolve) {\n                return setTimeout(resolve, 1000);\n              }));\n\n            case 5:\n              console.log(appIsReady, \"스플래시 1초 간 보여주는 중\");\n              _context.next = 12;\n              break;\n\n            case 8:\n              _context.prev = 8;\n              _context.t0 = _context[\"catch\"](0);\n              console.warn(_context.t0);\n              console.log(appIsReady, \"에러 발생\");\n\n            case 12:\n              _context.prev = 12;\n              console.log();\n              console.log(\"setApp state\", appIsReady);\n              return _context.finish(12);\n\n            case 16:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[0, 8, 12, 16]], Promise);\n    }\n\n    prepare();\n  }, [appIsReady]);\n  var onLayoutRootView = useCallback(function _callee() {\n    return _regeneratorRuntime.async(function _callee$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!(appIsReady && fontLoaded)) {\n              _context2.next = 4;\n              break;\n            }\n\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(SplashScreen.hideAsync());\n\n          case 3:\n            console.log(\"?\");\n\n          case 4:\n            return _context2.abrupt(\"return\", React.createElement(React.Fragment, null, children));\n\n          case 5:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }, [appIsReady]);\n\n  if (!appIsReady) {\n    console.log({\n      appIsReady: appIsReady\n    }, \"앱 리소스 다운로드에 실패했습니다.\");\n    return React.createElement(React.Fragment, null);\n  }\n\n  if (!fontLoaded) {\n    console.log({\n      fontLoaded: fontLoaded\n    }, \"폰트를 불러오는 데 실패했습니다.\");\n    return React.createElement(React.Fragment, null);\n  }\n\n  console.log(\"어디지 지금\");\n  return React.createElement(View, {\n    onLayout: onLayoutRootView,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 10\n    }\n  });\n}","map":{"version":3,"sources":["/Users/hyejinyang/Desktop/coffeeout-beta/src/components/app-bootstrap/app-bootstrap.tsx"],"names":["React","useCallback","useEffect","useRef","SplashScreen","useFonts","NotoSansKR_300Light","NotoSansKR_500Medium","NotoSansKR_700Bold","AppBootstrap","children","appIsReadyRef","fontLoaded","prepare","preventAutoHideAsync","Promise","resolve","setTimeout","console","log","appIsReady","warn","onLayoutRootView","hideAsync"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,SAA7B,EAAkDC,MAAlD,QAAyF,OAAzF;AACA,OAAO,KAAKC,YAAZ,MAA8B,oBAA9B;;AAGA,SACEC,QADF,EAGEC,mBAHF,EAKEC,oBALF,EAMEC,kBANF,QAQO,iCARP;AAcA,eAAe,SAASC,YAAT,OAAqE;AAAA,MAA7CC,QAA6C,QAA7CA,QAA6C;AAElF,MAAMC,aAAa,GAAGR,MAAM,CAAC,KAAD,CAA5B;;AACA,kBAAqBE,QAAQ,CAAC;AAC5BG,IAAAA,kBAAkB,EAAlBA,kBAD4B;AAE5BD,IAAAA,oBAAoB,EAApBA,oBAF4B;AAG5BD,IAAAA,mBAAmB,EAAnBA;AAH4B,GAAD,CAA7B;AAAA;AAAA,MAAOM,UAAP;;AAMAV,EAAAA,SAAS,CAAC,YAAM;AACd,aAAeW,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAEUT,YAAY,CAACU,oBAAb,EAFV;;AAAA;AAAA;AAAA,+CAGU,IAAIC,OAAJ,CAAY,UAAAC,OAAO;AAAA,uBAAIC,UAAU,CAACD,OAAD,EAAU,IAAV,CAAd;AAAA,eAAnB,CAHV;;AAAA;AAIIE,cAAAA,OAAO,CAACC,GAAR,CAAYC,UAAZ,EAAwB,kBAAxB;AAJJ;AAAA;;AAAA;AAAA;AAAA;AAMIF,cAAAA,OAAO,CAACG,IAAR;AACAH,cAAAA,OAAO,CAACC,GAAR,CAAYC,UAAZ,EAAwB,OAAxB;;AAPJ;AAAA;AASIF,cAAAA,OAAO,CAACC,GAAR;AAEAD,cAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BC,UAA5B;AAXJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAcAP,IAAAA,OAAO;AACR,GAhBQ,EAgBN,CAACO,UAAD,CAhBM,CAAT;AAmBA,MAAME,gBAAgB,GAAGrB,WAAW,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA,kBAG/BmB,UAAU,IAAIR,UAHiB;AAAA;AAAA;AAAA;;AAAA;AAAA,6CAI3BR,YAAY,CAACmB,SAAb,EAJ2B;;AAAA;AAKjCL,YAAAA,OAAO,CAACC,GAAR,CAAY,GAAZ;;AALiC;AAAA,8CAO5B,0CAAGT,QAAH,CAP4B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAD,EAQjC,CAACU,UAAD,CARiC,CAApC;;AAUA,MAAI,CAACA,UAAL,EAAiB;AACfF,IAAAA,OAAO,CAACC,GAAR,CAAY;AAAEC,MAAAA,UAAU,EAAVA;AAAF,KAAZ,EAA4B,qBAA5B;AACA,WAAO,yCAAP;AACD;;AACD,MAAI,CAACR,UAAL,EAAiB;AACfM,IAAAA,OAAO,CAACC,GAAR,CAAY;AAAEP,MAAAA,UAAU,EAAVA;AAAF,KAAZ,EAA4B,oBAA5B;AACA,WAAO,yCAAP;AACD;;AAEDM,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACA,SAAO,oBAAC,IAAD;AAAM,IAAA,QAAQ,EAAEG,gBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACD","sourcesContent":["import React, { useCallback, useEffect, useState, useRef, ReactNode, ReactElement } from \"react\";\nimport * as SplashScreen from \"expo-splash-screen\";\nimport { View } from \"react-native\";\n// 차후 폰트 변경 가능\nimport {\n  useFonts,\n  // NotoSansKR_100Thin,\n  NotoSansKR_300Light,\n  // NotoSansKR_400Regular,\n  NotoSansKR_500Medium,\n  NotoSansKR_700Bold\n  // NotoSansKR_900Black\n} from \"@expo-google-fonts/noto-sans-kr\";\n\ntype AppBootstrapProps = {\n  children: ReactNode;\n};\n\nexport default function AppBootstrap({ children }: AppBootstrapProps): ReactElement {\n  // const [appIsReady, setAppIsReady] = useState(false);\n  const appIsReadyRef = useRef(false);\n  const [fontLoaded] = useFonts({\n    NotoSansKR_700Bold,\n    NotoSansKR_500Medium,\n    NotoSansKR_300Light\n  });\n\n  useEffect(() => {\n    async function prepare() {\n      try {\n        await SplashScreen.preventAutoHideAsync();\n        await new Promise(resolve => setTimeout(resolve, 1000));\n        console.log(appIsReady, \"스플래시 1초 간 보여주는 중\");\n      } catch (e) {\n        console.warn(e);\n        console.log(appIsReady, \"에러 발생\");\n      } finally {\n        console.log()\n        // setAppIsReady(true);\n        console.log(\"setApp state\", appIsReady);\n      }\n    }\n    prepare();\n  }, [appIsReady]);\n\n  // Splash 화면(1초)에서 필요 리소스 로딩 중인 화면으로 이동\n  const onLayoutRootView = useCallback(async () => {\n    // async function rootView() {\n\n    if (appIsReady && fontLoaded) {\n      await SplashScreen.hideAsync();\n      console.log(\"?\");\n    }\n    return <>{children}</>;\n  }, [appIsReady]);\n\n  if (!appIsReady) {\n    console.log({ appIsReady }, \"앱 리소스 다운로드에 실패했습니다.\");\n    return <></>;\n  }\n  if (!fontLoaded) {\n    console.log({ fontLoaded }, \"폰트를 불러오는 데 실패했습니다.\");\n    return <></>;\n  }\n  // rootView();\n  console.log(\"어디지 지금\");\n  return <View onLayout={onLayoutRootView}></View>;\n}\n"]},"metadata":{},"sourceType":"module"}