{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/hyejinyang/Desktop/coffeeout-beta/src/screens/login/login.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport styles from \"./login.styles\";\nimport { ButtonNomal, Text } from \"../../components\";\nimport { useState, useRef } from \"react\";\nexport default function Login() {\n  var passwordRef = useRef(null);\n\n  var _useState = useState({\n    email: \"\",\n    password: \"\"\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      signInForm = _useState2[0],\n      setSignInForm = _useState2[1];\n\n  var setSignInFormInput = function setSignInFormInput(key, value) {\n    setSignInForm(_objectSpread(_objectSpread({}, signInForm), {}, _defineProperty({}, key, value)));\n  };\n\n  return React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 5\n    }\n  }, React.createElement(ScrollView, {\n    contentContainerStyle: styles.scrollView,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }\n  }, React.createElement(Text, {\n    style: styles.inputLabel,\n    weight: \"400\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 9\n    }\n  }, \"e-mail\"), React.createElement(TextInput, {\n    style: styles.inputContainer,\n    placeholder: \"corabal@gmail.com\",\n    autoCompleteType: \"email\",\n    keyboardType: \"email-address\",\n    returnKeyType: \"next\",\n    onChangeText: function onChangeText(value) {\n      setSignInFormInput(\"email\", value);\n    },\n    value: signInForm.email,\n    onSubmitEditing: function onSubmitEditing() {\n      var _passwordRef$current;\n\n      (_passwordRef$current = passwordRef.current) == null ? void 0 : _passwordRef$current.focus();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 9\n    }\n  }), React.createElement(Text, {\n    style: styles.inputLabel,\n    weight: \"400\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }\n  }, \"password\"), React.createElement(TextInput, {\n    style: styles.inputContainer,\n    autoCompleteType: \"password\",\n    keyboardType: \"visible-password\",\n    returnKeyType: \"done\",\n    secureTextEntry: true,\n    ref: passwordRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  }), React.createElement(Text, {\n    style: {\n      fontSize: 12,\n      lineHeight: 17.38,\n      color: \"#565656\"\n    },\n    weight: \"400\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  }, \"* \\uCD5C\\uC18C 8\\uC790\\uB9AC \\uC774\\uC0C1\\uC758 \\uAE38\\uC774\\uB85C \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694\"), React.createElement(ButtonNomal, {\n    title: \"\\uAC00\\uC785\\uD558\\uAE30\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  })));\n}","map":{"version":3,"sources":["/Users/hyejinyang/Desktop/coffeeout-beta/src/screens/login/login.tsx"],"names":["React","styles","ButtonNomal","Text","useState","useRef","Login","passwordRef","email","password","signInForm","setSignInForm","setSignInFormInput","key","value","container","scrollView","inputLabel","inputContainer","current","focus","fontSize","lineHeight","color"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,MAAoC,OAApC;;;;AAEA,OAAOC,MAAP;AACA,SAASC,WAAT,EAAsBC,IAAtB;AACA,SAASC,QAAT,EAAmBC,MAAnB,QAAiC,OAAjC;AAMA,eAAe,SAASC,KAAT,GAA+B;AAC5C,MAAMC,WAAW,GAAGF,MAAM,CAAoB,IAApB,CAA1B;;AACA,kBAAoCD,QAAQ,CAAC;AAC3CI,IAAAA,KAAK,EAAE,EADoC;AAE3CC,IAAAA,QAAQ,EAAE;AAFiC,GAAD,CAA5C;AAAA;AAAA,MAAOC,UAAP;AAAA,MAAmBC,aAAnB;;AAIA,MAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,GAAD,EAA+BC,KAA/B,EAAiD;AAC1EH,IAAAA,aAAa,iCAAMD,UAAN,2BAAmBG,GAAnB,EAAyBC,KAAzB,GAAb;AACD,GAFD;;AAGA,SACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEb,MAAM,CAACc,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,UAAD;AAAY,IAAA,qBAAqB,EAAEd,MAAM,CAACe,UAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEf,MAAM,CAACgB,UAApB;AAAgC,IAAA,MAAM,EAAC,KAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,EAIE,oBAAC,SAAD;AACE,IAAA,KAAK,EAAEhB,MAAM,CAACiB,cADhB;AAEE,IAAA,WAAW,EAAC,mBAFd;AAGE,IAAA,gBAAgB,EAAC,OAHnB;AAIE,IAAA,YAAY,EAAC,eAJf;AAKE,IAAA,aAAa,EAAC,MALhB;AAME,IAAA,YAAY,EAAE,sBAAAJ,KAAK,EAAI;AACrBF,MAAAA,kBAAkB,CAAC,OAAD,EAAUE,KAAV,CAAlB;AACD,KARH;AASE,IAAA,KAAK,EAAEJ,UAAU,CAACF,KATpB;AAUE,IAAA,eAAe,EAAE,2BAAM;AAAA;;AACrB,8BAAAD,WAAW,CAACY,OAAZ,0CAAqBC,KAArB;AACD,KAZH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,EAkBE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEnB,MAAM,CAACgB,UAApB;AAAgC,IAAA,MAAM,EAAC,KAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAlBF,EAqBE,oBAAC,SAAD;AACE,IAAA,KAAK,EAAEhB,MAAM,CAACiB,cADhB;AAEE,IAAA,gBAAgB,EAAC,UAFnB;AAGE,IAAA,YAAY,EAAC,kBAHf;AAIE,IAAA,aAAa,EAAC,MAJhB;AAKE,IAAA,eAAe,MALjB;AAME,IAAA,GAAG,EAAEX,WANP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IArBF,EA6BE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAAEc,MAAAA,QAAQ,EAAE,EAAZ;AAAgBC,MAAAA,UAAU,EAAE,KAA5B;AAAmCC,MAAAA,KAAK,EAAE;AAA1C,KAAb;AAAoE,IAAA,MAAM,EAAC,KAA3E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+GA7BF,EAgCE,oBAAC,WAAD;AAAa,IAAA,KAAK,EAAC,0BAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAhCF,CADF,CADF;AAsCD","sourcesContent":["import React, { ReactElement } from \"react\";\nimport { View, ScrollView, TextInput, Text as NativeText } from \"react-native\";\nimport styles from \"./login.styles\";\nimport { ButtonNomal, Text } from \"@Components\";\nimport { useState, useRef } from \"react\";\n\n// 인풋 컴포넌트 만들기 - 일단 여기서 만들고, 나중에 분리하기\n// 유효성 검증 띄울 수 있어야 함\n// 버튼 width, height 조정 필요\n\nexport default function Login(): ReactElement {\n  const passwordRef = useRef<NativeText | null>(null);\n  const [signInForm, setSignInForm] = useState({\n    email: \"\",\n    password: \"\"\n  });\n  const setSignInFormInput = (key: keyof typeof signInForm, value: string) => {\n    setSignInForm({ ...signInForm, [key]: value });\n  };\n  return (\n    <View style={styles.container}>\n      <ScrollView contentContainerStyle={styles.scrollView}>\n        <Text style={styles.inputLabel} weight=\"400\">\n          e-mail\n        </Text>\n        <TextInput\n          style={styles.inputContainer}\n          placeholder=\"corabal@gmail.com\"\n          autoCompleteType=\"email\"\n          keyboardType=\"email-address\"\n          returnKeyType=\"next\"\n          onChangeText={value => {\n            setSignInFormInput(\"email\", value);\n          }}\n          value={signInForm.email}\n          onSubmitEditing={() => {\n            passwordRef.current?.focus();\n          }}\n        />\n        <Text style={styles.inputLabel} weight=\"400\">\n          password\n        </Text>\n        <TextInput\n          style={styles.inputContainer}\n          autoCompleteType=\"password\"\n          keyboardType=\"visible-password\"\n          returnKeyType=\"done\"\n          secureTextEntry\n          ref={passwordRef}\n        />\n        <Text style={{ fontSize: 12, lineHeight: 17.38, color: \"#565656\" }} weight=\"400\">\n          * 최소 8자리 이상의 길이로 입력해주세요\n        </Text>\n        <ButtonNomal title=\"가입하기\" />\n      </ScrollView>\n    </View>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}